-------------------------------------------------------------------------------

1. Instructions

- replace any [...] with free text,
  and
- replace the [?] with an X if you have completed that stage,
- replace the [?] with an * if you have attempted that stage, but you know
  it doesn't work completely; document why you think it doesn't work, plus
  what you would do to fix the problem, at the end of the marksheet.

-------------------------------------------------------------------------------

2. Information

So that we can calibrate and improve the assignment in the future, give us
a rough idea how long (in hours) you spent on it *in total*:

effort : [80] hours

-------------------------------------------------------------------------------

3. Citation

Clearly it might have an influence on your mark, but the use of third-party
resources *is* allowed *if* correctly cited (unless explicitly prohibited
by the assignment description of course).  Let us know what third-party
source code or resources you used (if any) so it's clear what's your work
and what isn't:

[NA]

-------------------------------------------------------------------------------

4. Marking

The following gives a stage-by-stage description of the assignment marking
scheme.  Note this acts as an indicative guideline only, including weights
for each more obvious element (e.g., the functional correctness of a stage).
For example, other elements outside this list *often* warrant an increase
or decrease in marks; examples include hard to quantify features such as
the style or efficiency of a solution.

[X] Stage 1 : pre-emptive operating system kernel                    ( 30%)

    Stage 2 : close generalisations and enhancements
[X]           - fork and exit system calls                           ( 10%)
[X]           - priority based scheduler                             ( 10%)
[X]           - Inter-Process Communication (IPC)                    ( 10%)

    Stage 3 : open  generalisations and enhancements
[X]           - file system based on simplified, emulated disk       ( 40%)
                *OR*
[?]           - kernel port to real, physical hardware               ( 40%)

                                                                     ------
                                                                     (100%)

-------------------------------------------------------------------------------

5. Documentation

Any other documentation, notes or comments that you think are important or
might be easy to overlook (e.g., a subtle issue or technique in associated
source code) should go here:

[Here are some useful commands for the terminal:
'p0','p1','bottles','phil' each start the associated program.
'write' lets the user enter a filename and then some text to save a file to disk
'read' lets the user open a saved text file given a file name
'ls' will list files in the current directory
'mkdir name' will create a new directory with the given name
'cd name' will enter the given directory
'kill id' will end the process with the given id
 '&' toggles concurrent mode so the user can enter commands while other programs run
 Detailed descriptions at top of kernel.c, fs.c, phil.c.

 KNOWN ISSUES:
 Text files can be too big and overwrite the next file
    A solution would be to fragment files and either store a list of addresses in the
    boot sector, or store the address of the next fragment at the end of the previous.
 Only 1 new directory per directory (sorry)
    Currently the address is chosen by adding an offset. Solution is to store map of
    all directory names to their addresses to pick new address
 Editing files using 'write' or reading/writing many files in 1 go can return blanks
    This is usually due to strings overwriting each other as these functions take pointers    
   ]

-------------------------------------------------------------------------------
